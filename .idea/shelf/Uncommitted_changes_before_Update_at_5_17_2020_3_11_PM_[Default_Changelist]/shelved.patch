Index: src/Runner.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.awt.Color;\r\nimport java.awt.Font;\r\nimport java.awt.Graphics;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.KeyEvent;\r\nimport java.awt.event.KeyListener;\r\nimport java.awt.event.MouseEvent;\r\nimport java.awt.event.MouseListener;\r\nimport java.net.URL;\r\nimport java.util.ArrayList;\r\nimport javax.swing.ImageIcon;\r\nimport javax.swing.JFrame;\r\nimport javax.swing.JPanel;\r\n\r\n/**\r\n * A Class to run our game\r\n *\r\n * @author Ethan Ling, Hangyul Yun, John Whitney\r\n * @version 05/03/2020\r\n */\r\npublic class Runner extends JPanel implements ActionListener, KeyListener, MouseListener {\r\n    private static final long serialVersionUID = 1L;\r\n\r\n    // ==FIELDS==\r\n    private final Font font = new Font(\"ComicSans\", Font.PLAIN, 20);\r\n    private static final float COOLDOWN_MAX = (float) 0.5;\r\n    private static final float IFRAMECOUNT = 3;\r\n    private static final float SPAWNCD = 1;\r\n    private static int highScore;\r\n    private int health = 100;\r\n\r\n    private double iFramesStart, startTime, cdStart, spawnStart, seconds;\r\n\r\n    private boolean spawn, iFrames, cd, pressedUp, pressedDown, pressedLeft, pressedRight, pressedShoot;\r\n\r\n    private URL lemonImg;\r\n    private Player player;\r\n    private Enemy lil;\r\n    private ArrayList<Enemy> generalEnemies;\r\n    private ArrayList<Enemy> enemies;\r\n    private ArrayList<Projectile> screen;\r\n\r\n    public Runner() {\r\n        startTime = System.nanoTime();\r\n        lemonImg = Main.class.getResource(\"/assets/lemon.png\");\r\n        player = new Player(Main.DRAWING_WIDTH / 2, Main.DRAWING_HEIGHT / 2, 25, health, null);\r\n        lil = new Enemy(0, 0, 25, 10, 5, 2, null, \"lil enemy\");\r\n        lil.addYVelocity(3);\r\n        Projectile lemon = new Projectile(0, 0, 10, lemonImg, 0, 0, 5, false, player);\r\n        player.setProjectile(lemon);\r\n        generalEnemies = new ArrayList<Enemy>();\r\n        enemies = new ArrayList<Enemy>();\r\n        screen = new ArrayList<Projectile>();\r\n        screen.add(new Asteroid(50, 50, 10, 0, 5, 10, 5));\r\n        generalEnemies.add(lil);\r\n    }\r\n\r\n    //Paints everything\r\n    public void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        g.setColor(Color.lightGray);\r\n        g.fillRect((int) (getWidth() * 7.5 / 9), 0, (getWidth()), getHeight());\r\n\r\n        g.setColor(Color.black);\r\n        g.setFont(font);\r\n        g.drawString(\"Score: \" + player.getPoints(), (int) (getWidth() * 7.7 / 9), getHeight() / 9);\r\n        g.drawString(\"High Score: \" + highScore, (int) (getWidth() * 7.7 / 9), getHeight() * 2 / 9);\r\n        g.drawString(\"Health: \" + player.getHealth(), (int) (getWidth() * 7.7 / 9), getHeight() * 5 / 9);\r\n\r\n        this.doAction();\r\n\r\n        act();\r\n        collide();\r\n\r\n        player.draw(this, g);\r\n        enemies.forEach((a) -> a.draw(this, g));\r\n        screen.forEach((a) -> a.draw(this, g));\r\n    }\r\n\r\n    private void tick(JFrame window) {\r\n        seconds = (System.nanoTime() - startTime) / 1000000000;\r\n        if (seconds - iFramesStart >= IFRAMECOUNT) {\r\n            iFrames = false;\r\n        }\r\n        if (seconds - cdStart >= COOLDOWN_MAX) {\r\n            cd = false;\r\n        }\r\n        if (seconds - spawnStart >= SPAWNCD) {\r\n            spawn = true;\r\n        }\r\n        if (!enemies.equals(null)) {\r\n            for (Enemy e : enemies) {\r\n                if (e.getxCord() - e.getRadius() > window.getWidth()) {\r\n                    enemies.remove(e);\r\n                }\r\n            }\r\n        }\r\n        if (screen.equals(null)) {\r\n            for (Projectile e : screen) {\r\n                if (e.equals(null)) {\r\n                    System.out.println(\"a fd\");\r\n                }\r\n                if (e.getyCord() - e.getRadius() > window.getHeight()) {\r\n                    screen.remove(e);\r\n                }\r\n            }\r\n        }\r\n        lil.setHealth((float) (seconds / 30 + 10));\r\n        if (spawn) {\r\n            spawn = false;\r\n            this.spawnStart = seconds;\r\n            spawn(window);\r\n        }\r\n\r\n    }\r\n\r\n    private void spawn(JFrame window) {\r\n        if (!(seconds < Math.sqrt(seconds))) {\r\n            for (int f = (int) (Math.sqrt(seconds)); f > 0; f--) {\r\n                enemies.add(lil.makeEnemy((int) (Math.random() * window.getWidth()), 0));\r\n                enemies.get(enemies.size() - 1).addYVelocity(3);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void collide() {\r\n        for (Enemy e : enemies) {\r\n            if (e.isIntersecting(player)) {\r\n                if (!iFrames) {\r\n                    this.iFramesStart = seconds;\r\n                    iFrames = true;\r\n                    player.setPoints(player.getPoints() - 1);\r\n                    if (e.damageActor(player)) {\r\n                        restartScreen(\"Killed by: \" + e.getName());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        for (Projectile e : screen) {\r\n            if (e.fromPlayer()) {\r\n                for (Enemy a : enemies) {\r\n                    if (e.isIntersecting(a)) {\r\n                        if (e.damageActor(a)) {\r\n                            player.killedActor();\r\n                            enemies.remove(a);\r\n                        }\r\n                    }\r\n                }\r\n            } else if (e.isIntersecting(player)) {\r\n                if (!iFrames) {\r\n                    iFramesStart = seconds;\r\n                    iFrames = true;\r\n                    player.setPoints(player.getPoints() - 1);\r\n                    if (e.damageActor(player)) {\r\n                        restartScreen(\"Killed by: an enemy bullet\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void restartScreen(String string) {\r\n        System.out.println(string);\r\n\r\n    }\r\n\r\n    private void act() {\r\n        player.act();\r\n        enemies.forEach((a) -> a.act());\r\n        screen.forEach((a) -> a.act());\r\n    }\r\n\r\n    private void doAction() {\r\n        int moveSpeed = 1;\r\n        if (pressedUp) {\r\n            if (player.getYVelocity() >= moveSpeed * -3) {\r\n                player.addYVelocity(-moveSpeed);\r\n            }\r\n        } else {\r\n            if (player.getYVelocity() < 0) {\r\n                player.addYVelocity(+moveSpeed);\r\n            }\r\n        }\r\n\r\n        if (pressedLeft) {\r\n            if (player.getXVelocity() >= moveSpeed * -3) {\r\n                player.addXVelocity(-moveSpeed);\r\n            }\r\n        } else {\r\n            if (player.getXVelocity() < 0) {\r\n                player.addXVelocity(+moveSpeed);\r\n            }\r\n        }\r\n\r\n        if (pressedDown) {\r\n            if (player.getYVelocity() <= moveSpeed * 3) {\r\n                player.addYVelocity(moveSpeed);\r\n            }\r\n        } else {\r\n            if (player.getYVelocity() > 0) {\r\n                player.addYVelocity(-moveSpeed);\r\n            }\r\n        }\r\n\r\n        if (pressedRight) {\r\n            if (player.getXVelocity() <= moveSpeed * 3) {\r\n                player.addXVelocity(moveSpeed);\r\n            }\r\n        } else {\r\n            if (player.getXVelocity() > 0) {\r\n                player.addXVelocity(-moveSpeed);\r\n            }\r\n        }\r\n        if (pressedShoot) {\r\n            if (!cd) {\r\n                cd = true;\r\n                this.cdStart = seconds;\r\n                player.shootProjectile(screen, player, 0, -10);\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void mouseClicked(MouseEvent arg0) {\r\n        // TODO Auto-generated method stub\r\n    }\r\n\r\n    @Override\r\n    public void mouseEntered(MouseEvent arg0) {\r\n        // TODO Auto-generated method stub\r\n    }\r\n\r\n    @Override\r\n    public void mouseExited(MouseEvent arg0) {\r\n        // TODO Auto-generated method stub\r\n    }\r\n\r\n    @Override\r\n    public void mousePressed(MouseEvent arg0) {\r\n        // TODO Auto-generated method stub\r\n    }\r\n\r\n    @Override\r\n    public void mouseReleased(MouseEvent arg0) {\r\n        // TODO Auto-generated method stub\r\n    }\r\n\r\n    @Override\r\n    public void keyPressed(KeyEvent arg) {\r\n        if (arg.getKeyCode() == KeyEvent.VK_W) {\r\n            pressedUp = true;\r\n        }\r\n        if (arg.getKeyCode() == KeyEvent.VK_A) {\r\n            pressedLeft = true;\r\n        }\r\n        if (arg.getKeyCode() == KeyEvent.VK_S) {\r\n            pressedDown = true;\r\n        }\r\n        if (arg.getKeyCode() == KeyEvent.VK_D) {\r\n            pressedRight = true;\r\n        }\r\n        if (arg.getKeyCode() == KeyEvent.VK_SPACE) {\r\n            pressedShoot = true;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void keyReleased(KeyEvent arg) {\r\n        if (arg.getKeyCode() == KeyEvent.VK_W) {\r\n            pressedUp = false;\r\n        }\r\n        if (arg.getKeyCode() == KeyEvent.VK_A) {\r\n            pressedLeft = false;\r\n        }\r\n        if (arg.getKeyCode() == KeyEvent.VK_S) {\r\n            pressedDown = false;\r\n        }\r\n        if (arg.getKeyCode() == KeyEvent.VK_D) {\r\n            pressedRight = false;\r\n        }\r\n        if (arg.getKeyCode() == KeyEvent.VK_SPACE) {\r\n            pressedShoot = false;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void keyTyped(KeyEvent arg) {\r\n        // TODO Auto-generated method stub\r\n    }\r\n\r\n    @Override\r\n    public void actionPerformed(ActionEvent arg0) {\r\n\r\n    }\r\n\r\n    public void run(JFrame window) {\r\n        while (true) {\r\n            tick(window);\r\n            repaint();\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Runner.java	(revision da37a8c8339cc4034cf5a81831bcc1e29872b3ad)
+++ src/Runner.java	(date 1589749990109)
@@ -111,8 +111,7 @@
             spawn = false;
             this.spawnStart = seconds;
             spawn(window);
-        }
-
+    }
     }
 
     private void spawn(JFrame window) {
@@ -139,7 +138,7 @@
         }
         for (Projectile e : screen) {
             if (e.fromPlayer()) {
-                for (Enemy a : enemies) {
+                for     (Enemy a : enemies) {
                     if (e.isIntersecting(a)) {
                         if (e.damageActor(a)) {
                             player.killedActor();
